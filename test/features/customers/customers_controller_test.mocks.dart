// Mocks generated by Mockito 5.4.6 from annotations
// in organik_vendas/test/features/customers/customers_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:organik_vendas/src/features/customers/domain/customer_model.dart'
    as _i2;
import 'package:organik_vendas/src/features/customers/domain/customers_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCustomerModel_0 extends _i1.SmartFake implements _i2.CustomerModel {
  _FakeCustomerModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CustomersService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomersService extends _i1.Mock implements _i3.CustomersService {
  MockCustomersService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.CustomerModel>> findAll() =>
      (super.noSuchMethod(
            Invocation.method(#findAll, []),
            returnValue: _i4.Future<List<_i2.CustomerModel>>.value(
              <_i2.CustomerModel>[],
            ),
          )
          as _i4.Future<List<_i2.CustomerModel>>);

  @override
  _i4.Future<_i2.CustomerModel> findById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#findById, [id]),
            returnValue: _i4.Future<_i2.CustomerModel>.value(
              _FakeCustomerModel_0(this, Invocation.method(#findById, [id])),
            ),
          )
          as _i4.Future<_i2.CustomerModel>);

  @override
  _i4.Future<_i2.CustomerModel> create({
    required String? name,
    required String? address,
    required String? phone,
    required String? countryISOCode,
    String? observation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #name: name,
              #address: address,
              #phone: phone,
              #countryISOCode: countryISOCode,
              #observation: observation,
            }),
            returnValue: _i4.Future<_i2.CustomerModel>.value(
              _FakeCustomerModel_0(
                this,
                Invocation.method(#create, [], {
                  #name: name,
                  #address: address,
                  #phone: phone,
                  #countryISOCode: countryISOCode,
                  #observation: observation,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.CustomerModel>);

  @override
  _i4.Future<_i2.CustomerModel> update({
    required int? id,
    required String? name,
    required String? address,
    required String? phone,
    required String? countryISOCode,
    required DateTime? createdAt,
    String? observation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [], {
              #id: id,
              #name: name,
              #address: address,
              #phone: phone,
              #countryISOCode: countryISOCode,
              #createdAt: createdAt,
              #observation: observation,
            }),
            returnValue: _i4.Future<_i2.CustomerModel>.value(
              _FakeCustomerModel_0(
                this,
                Invocation.method(#update, [], {
                  #id: id,
                  #name: name,
                  #address: address,
                  #phone: phone,
                  #countryISOCode: countryISOCode,
                  #createdAt: createdAt,
                  #observation: observation,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.CustomerModel>);

  @override
  _i4.Future<void> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
